from aiogram.enums import ParseMode
from loader import dp, bot
from aiogram import F, types
import sqlite3
from keyboards.defoult import towns_keyboard


@dp.message(F.text == "–ü—É–Ω–∫—Ç—ã —Å–±–æ—Ä–∞‚ôªÔ∏è")
async def iac(message: types.Message):  # Information about companies
    await message.answer("–ü—Ä–æ –∫–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã —Å–±–æ—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=towns_keyboard)


@dp.message(F.text == "–ü—É–Ω–∫—Ç—ã —Å–±–æ—Ä–∞")  # 2-–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–∏–µ–ª—è
async def iac2(message: types.Message):
    await message.answer("–ü—Ä–æ –∫–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã —Å–±–æ—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=towns_keyboard)


@dp.message(F.text == "–•–ê–ù–¢–´-–ú–ê–ù–°–ò–ô–°–öüåÅ")
async def xma(message: types.Message):
    con = sqlite3.connect("data/database/information_about_companies")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cur = con.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = cur.execute("""SELECT address, time_work, dinner, TechBreak FROM info WHERE name_city = ?""", ('–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫', ))
    count_table_2 = ""
    count_table_3 = ""
    count_table_4 = ""
    count_table_5 = ""
    for row in result:
        count_table_2 = row[0]
        count_table_3 = row[1]
        count_table_4 = row[2]
        count_table_5 = row[3]
    con.commit()
    con.close()

    await bot.send_location(message.from_user.id, 61.003895, 69.051789)
    await message.answer(f"<ins>–ê–¥—Ä–µ—Å—Å:</ins> –≥. –•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫, {count_table_2}\n"
                         f"<ins>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</ins> {count_table_3}\n"
                         f"<ins>–û–±–µ–¥:</ins> {count_table_4}\n"
                         f"<ins>–¢–µ—Ö. –ø–µ—Ä–µ—Ä—ã–≤—ã:</ins> {count_table_5}\n",
                         parse_mode=ParseMode.HTML, reply_markup=towns_keyboard
                         )


@dp.message(F.text == "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫")  # 2-–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–∏–µ–ª—è
async def xma1(message: types.Message):
    con = sqlite3.connect("data/database/information_about_companies")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cur = con.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = cur.execute("""SELECT address, time_work, dinner, TechBreak FROM info WHERE name_city = ?""",
                         ('–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫',))
    count_table_2 = ""
    count_table_3 = ""
    count_table_4 = ""
    count_table_5 = ""
    for row in result:
        count_table_2 = row[0]
        count_table_3 = row[1]
        count_table_4 = row[2]
        count_table_5 = row[3]
    con.commit()
    con.close()

    await bot.send_location(message.from_user.id, 61.003895, 69.051789)
    await message.answer(f"<ins>–ê–¥—Ä–µ—Å—Å:</ins> –≥. –•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫, {count_table_2}\n"
                         f"<ins>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</ins> {count_table_3}\n"
                         f"<ins>–û–±–µ–¥:</ins> {count_table_4}\n"
                         f"<ins>–¢–µ—Ö. –ø–µ—Ä–µ—Ä—ã–≤—ã:</ins> {count_table_5}\n",
                         parse_mode=ParseMode.HTML, reply_markup=towns_keyboard
                         )


@dp.message(F.text == "–°–£–†–ì–£–¢üåÅ")
async def surg(message: types.Message):
    con = sqlite3.connect("data/database/information_about_companies")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cur = con.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = cur.execute("""SELECT address, time_work, dinner, TechBreak FROM info WHERE name_city = ?""", ('–°—É—Ä–≥—É—Ç', ))
    count_table_2 = ""
    count_table_3 = ""
    count_table_4 = ""
    count_table_5 = ""
    for row in result:
        count_table_2 = row[0]
        count_table_3 = row[1]
        count_table_4 = row[2]
        count_table_5 = row[3]
    con.commit()
    con.close()

    await bot.send_location(message.from_user.id, 61.257621474483486, 73.45676568947817)
    await message.answer(f"<ins>–ê–¥—Ä–µ—Å—Å:</ins> –≥. –°—É—Ä–≥—É—Ç, {count_table_2}\n"
                         f"<ins>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</ins> {count_table_3}\n"
                         f"<ins>–û–±–µ–¥:</ins> {count_table_4}\n"
                         f"<ins>–¢–µ—Ö. –ø–µ—Ä–µ—Ä—ã–≤—ã:</ins> {count_table_5}\n",
                         parse_mode=ParseMode.HTML, reply_markup=towns_keyboard
                         )


@dp.message(F.text == "–°—É—Ä–≥—É—Ç")  # 2-–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–∏–µ–ª—è
async def surg1(message: types.Message):
    con = sqlite3.connect("data/database/information_about_companies")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cur = con.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = cur.execute("""SELECT address, time_work, dinner, TechBreak FROM info WHERE name_city = ?""", ('–°—É—Ä–≥—É—Ç', ))
    count_table_2 = ""
    count_table_3 = ""
    count_table_4 = ""
    count_table_5 = ""
    for row in result:
        count_table_2 = row[0]
        count_table_3 = row[1]
        count_table_4 = row[2]
        count_table_5 = row[3]
    con.commit()
    con.close()

    await bot.send_location(message.from_user.id, 61.257621474483486, 73.45676568947817)
    await message.answer(f"<ins>–ê–¥—Ä–µ—Å—Å:</ins> –≥. –°—É—Ä–≥—É—Ç, {count_table_2}\n"
                         f"<ins>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</ins> {count_table_3}\n"
                         f"<ins>–û–±–µ–¥:</ins> {count_table_4}\n"
                         f"<ins>–¢–µ—Ö. –ø–µ—Ä–µ—Ä—ã–≤—ã:</ins> {count_table_5}\n",
                         parse_mode=ParseMode.HTML, reply_markup=towns_keyboard
                         )


@dp.message(F.text == "–ù–ò–ñ–ù–ï–í–ê–†–¢–û–í–°–öüåÅ")
async def vart(message: types.Message):
    con = sqlite3.connect("data/database/information_about_companies")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cur = con.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = cur.execute("""SELECT address, time_work, dinner, TechBreak FROM info WHERE name_city = ?""", ('–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', ))
    count_table_2 = ""
    count_table_3 = ""
    count_table_4 = ""
    count_table_5 = ""
    for row in result:
        count_table_2 = row[0]
        count_table_3 = row[1]
        count_table_4 = row[2]
        count_table_5 = row[3]
    con.commit()
    con.close()

    await bot.send_location(message.from_user.id, 60.945131, 76.574973)
    await message.answer(f"<ins>–ê–¥—Ä–µ—Å—Å:</ins> –≥. –ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫, {count_table_2}\n"
                         f"<ins>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</ins> {count_table_3}\n"
                         f"<ins>–û–±–µ–¥:</ins> {count_table_4}\n"
                         f"<ins>–¢–µ—Ö. –ø–µ—Ä–µ—Ä—ã–≤—ã:</ins> {count_table_5}\n",
                         parse_mode=ParseMode.HTML, reply_markup=towns_keyboard
                         )


@dp.message(F.text == "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫")  # 2-–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–∏–µ–ª—è
async def vart1(message: types.Message):
    con = sqlite3.connect("data/database/information_about_companies")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cur = con.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = cur.execute("""SELECT address, time_work, dinner, TechBreak FROM info WHERE name_city = ?""", ('–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', ))
    count_table_2 = ""
    count_table_3 = ""
    count_table_4 = ""
    count_table_5 = ""
    for row in result:
        count_table_2 = row[0]
        count_table_3 = row[1]
        count_table_4 = row[2]
        count_table_5 = row[3]
    con.commit()
    con.close()

    await bot.send_location(message.from_user.id, 60.945131, 76.574973)
    await message.answer(f"<ins>–ê–¥—Ä–µ—Å—Å:</ins> –≥. –ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫, {count_table_2}\n"
                         f"<ins>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</ins> {count_table_3}\n"
                         f"<ins>–û–±–µ–¥:</ins> {count_table_4}\n"
                         f"<ins>–¢–µ—Ö. –ø–µ—Ä–µ—Ä—ã–≤—ã:</ins> {count_table_5}\n",
                         parse_mode=ParseMode.HTML, reply_markup=towns_keyboard
                         )