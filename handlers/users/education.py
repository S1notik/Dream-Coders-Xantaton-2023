from aiogram import types, F
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from keyboards.inline import *
from loader import dp
from keyboards.defoult.reply_buttons import education_keyboard
from keyboards.inline import question1_keyboard, question2_keyboard
import time
import sqlite3


con = sqlite3.connect("data/database/information_about_companies.db")
cur = con.cursor()
id = count = 0
main_flag = False


@dp.message(F.text == "–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìö")
async def education(message: types.Message):
    await message.answer("<b>–í—ã –æ–∫—É–Ω—É–ª–∏—Å—å –≤ –º–∏—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>üìö",
                         reply_markup=education_keyboard, parse_mode=ParseMode.HTML)


# Useful links and video lessons
@dp.message(F.text == "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏üîó")
async def education(message: types.Message):
    await message.answer("–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏:",
                         reply_markup=useful_links_inline_keyboard)



# –¢–µ—Å—Ç –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ ---------------------------------------------------------------------------------------------
#
# @dp.message(F.text == "–¢–µ—Å—ÇüèÜ")
# async def start_test_question1(message: types.Message):
#     await message.answer("‚ùî–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ ‚ôªÔ∏è? –ï–≥–æ —á–∞—Å—Ç–æ —Ä–∞–∑–º–µ—â–∞—é—Ç –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
#                          reply_markup=question1_keyboard)
#     global count, id, cur, main_flag
#     main_flag = False
#     cur = con.cursor()
#     id = message.from_user.id
#     count = 0
#

# –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
# async def score_for_questions(id):
#     con = sqlite3.connect("data/database/information_about_companies.db")
#     cur = con.cursor()
#     score = cur.execute(f'''SELECT score FROM users WHERE id = {id}''').fetchone()[0]
#     cur.execute(f"""UPDATE users SET score={score + 10 if score else 10} WHERE id={id}""")
#     con.commit()
#     con.close()
