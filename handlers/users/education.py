from aiogram import types, F
from aiogram.filters import CommandStart
from keyboards.inline import useful_links_inline_keyboard, ecolesson_inline_keyboard
from loader import dp
from keyboards.defoult.reply_buttons import education_keyboard
from keyboards.inline import question1_keyboard, question2_keyboard



@dp.message(F.text == "–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìö")
async def education(message: types.Message):
    await message.answer("–í—ã –≤ –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö",
                         reply_markup=education_keyboard)


# Useful links and video lessons
@dp.message(F.text == "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏üîó")
async def education(message: types.Message):
    await message.answer("–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏:",
                         reply_markup=useful_links_inline_keyboard)


# –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–æ—É—Ä–æ–∫ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ
@dp.message(F.text == "–≠–∫–æ—É—Ä–æ–∫üè´")
async def education(message: types.Message):
    await message.answer("–≠–∫–æ—Ü–µ–Ω—Ç—Ä ¬´–Æ–≥—Ä–∞ –°–æ–±–∏—Ä–∞–µ—Ç¬ª –Ω–µ —Ç–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è - —ç—Ç–æ –µ—â–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–∫—Ü–∏–∏.\n\n"
                         "–ù–∞ –≠–∫–æ—É—Ä–æ–∫–µ –±—É–¥–µ—Ç –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –∫–∞–∫–∏–µ –≤–∏–¥—ã –æ—Ç—Ö–æ–¥–æ–≤ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–ª–∏ –Ω–µ—Ç, –∫–∞–∫–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –µ—Å—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–º –≤–µ—â–∞–º –∏ —á—Ç–æ –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Å—ã—Ä—å—è."
                         " –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ —ç–∫–æ—É—Ä–æ–∫–æ–≤ —É–∑–Ω–∞—é—Ç –æ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–º —Å–±–æ—Ä–µ –æ—Ç—Ö–æ–¥–æ–≤ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—É—Ç–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Å—ã—Ä—å—è –∏–∑ –ø–µ—Ä–≤—ã—Ö —Ä—É–∫.",
                         reply_markup=ecolesson_inline_keyboard)

# –¢–µ—Å—Ç –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤

@dp.message(F.text == "–¢–µ—Å—ÇüèÜ")
async def start_test_question1(message: types.Message):
    await message.answer("–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç —ç—Ç–æ—Ç –∑–Ω–∞—á–æ–∫ ‚ôªÔ∏è? –ï–≥–æ —á–∞—Å—Ç–æ —Ä–∞–∑–º–µ—â–∞—é—Ç –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                         reply_markup=question1_keyboard)

@dp.callback_query(F.data == "answer1_question1_quiz")
async def question2(message: types.Message):
    await message.answer("–í–µ—Ä–Ω–æ!\n\n"
                         "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n"
                         "–ú–æ–∂–Ω–æ –ª–∏ –∫–ª–∞—Å—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –∏–∑-–ø–æ–¥ –∫–æ—Ñ–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—É–º–∞–≥–∏?",
                         reply_markup=question2_keyboard)

@dp.callback_query(F.data == "answer2_question1_quiz")
async def question2(message: types.Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω–æ!\n\n"
                         "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n"
                         "–ú–æ–∂–Ω–æ –ª–∏ –∫–ª–∞—Å—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –∏–∑-–ø–æ–¥ –∫–æ—Ñ–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—É–º–∞–≥–∏?",
                         reply_markup=question2_keyboard)

@dp.callback_query(F.data == "answer3_question1_quiz")
async def question2(message: types.Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω–æ!\n\n"
                         "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n"
                         "–ú–æ–∂–Ω–æ –ª–∏ –∫–ª–∞—Å—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –∏–∑-–ø–æ–¥ –∫–æ—Ñ–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—É–º–∞–≥–∏?",
                         reply_markup=question2_keyboard)

